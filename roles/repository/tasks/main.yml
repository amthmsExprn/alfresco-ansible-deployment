---
- name: Include vars for postgres credentials
  include_vars: "postgres.yml"
  when: repo_db_url == ""

- name: Include OS specific variables
  include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"

#- name: Ensure a list of packages installed
#  become: true
#  become_user: root
#  package:
#    name: "{{ item }}"
#    state: present
#  poll: 0
#  loop: "{{ utils_repo }}"

####### Async download of product installers to control
- name: Print async download start
  debug:
    msg: "Starting asynchronous download of {{ acs_zip_file }}, AMPs, WAR files"
    
- name: "Download {{ acs_zip_file }}"
  delegate_to: localhost
  become: false
  get_url:
    url: "{{ downloads.acs_zip_url }}"
    dest:  "{{ role_path }}/files/{{ acs_zip_file }}" 
    #dest: "{{ download_location }}/{{ acs_zip_file }}"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
    checksum: "sha1:{{ downloads.acs_zip_sha1_checksum }}"
  register: distribution_download_toController
  async: 900
  poll: 0   

- name: Create  download folders on controller
  delegate_to: localhost
  become: false
  file:
    path: "{{ role_path }}/files{{ item }}"
    state: directory
  loop:
  # content_folder = "{{ binaries_folder }}/content-services-{{ acs.version }}"
  # binaries_folder = /opt/me2ess/alfresco
     - "{{ content_folder }}/amps_repo"
     - "{{ content_folder }}/amps_share"
     - "{{ content_folder }}/web-server/webapps"

- name: Download AMPS
  #become: true
  #become_user: root
  become: false
  delegate_to: localhost
  loop: "{{ query('items', amp_downloads) }}"
  get_url:
    url: "{{ item.url }}"
    #dest: "{{ item.dest }}"
    dest: "{{ role_path }}/files{{ item.dest }}"
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
  register: amp_download_result_toController
  async: 900
  poll: 0

- name: Download postgresql jar
  #become: true
  #become_user: root
  delegate_to: localhost
  become: false  
  get_url:
    url: "{{ dependencies_url.postgresql_connector }}"
    dest:  "{{ role_path }}/files/postgresql.jar"
    #dest: "{{ tomcat_config_dir }}/lib/postgresql.jar"
  register: postgresql_download_toController
  when: repo_db_url == ""
  async: 900
  poll: 0
  
- name: Download war files
  #become: true
  #become_user: root
  delegate_to: localhost
  become: false
  loop: "{{ query('items', war_downloads) }}"
  changed_when: false
  get_url:
    url: "{{ item.url }}"
    #dest: "{{ item.dest }}"
    dest: "{{ role_path }}/files{{ item.dest }}"    
    url_username: "{{ nexus_user }}"
    url_password: "{{ nexus_password }}"
  register: war_download_result_toController
  async: 900
  poll: 0

########### End Async download block ####################
  

- name: Create folders
  become: true
  become_user: root
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rx,o=rx'
  loop:
     - "{{ binaries_folder }}/modules/acs-platform"
     - "{{ binaries_folder }}/modules/acs-share"
     - "{{ content_folder }}/modules/acs-platform"
     - "{{ content_folder }}/modules/acs-share"
     - "{{ content_folder }}/amps_repo"
     - "{{ content_folder }}/amps_share"
     - "{{ content_folder }}/alf_data"
     - "{{ content_folder }}/alfresco-mmt"
     - "{{ content_folder }}/webapps/alfresco"
     - "{{ content_folder }}/web-server/lib"
     - "{{ content_folder }}/web-server/webapps"
     - "{{ settings_folder }}/classpath/alfresco/extension/transform/pipelines"
     - "{{ settings_folder }}/classpath/alfresco/extension/transform/renditions"
     - "{{ settings_folder }}/classpath/alfresco/extension/mimetypes"
     - "{{ settings_folder }}/classpath/alfresco/web-extension"
     - "{{ content_data_folder }}/keystore"
     - "{{ tomcat_config_dir }}/lib"
     - "{{ tomcat_config_dir }}/conf/Catalina/localhost"

  
  
- name: Copy db_connector_repo to {{ tomcat_config_dir }}/lib/ folder
  block:
    - name: Create Postgres JDBC driver directory
      delegate_to: localhost
      become: false
      file:
        path: "{{ inventory_dir }}/configuration_files/db_connector_repo/"
        state: directory    
    - name: Download Postgres JDBC driver
      delegate_to: localhost
      become: false
      get_url:
        url: https://jdbc.postgresql.org/download/postgresql-42.2.19.jar
        dest: "{{ inventory_dir }}/configuration_files/db_connector_repo/db_driver.jar"
    - name: Copy db_connector_repo
      copy:
        src: "{{ inventory_dir }}/configuration_files/db_connector_repo/"
        dest: "{{ tomcat_config_dir }}/lib/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
  when: repo_db_url != ""

- name: Add ACS home to setenv.sh
  become: true
  become_user: "{{ username }}"
  lineinfile:
    path: "{{ config_folder }}/setenv.sh"
    insertafter: EOF
    line: "export ACS_HOME={{ binaries_folder }}/content-services-{{ acs.version }}"

- name: Add ACS home to tomcat.sh
  become: true
  become_user: "{{ username }}"
  lineinfile:
    path: "/opt/me2ess/alfresco/tomcat.sh"
    insertafter: 'CATALINA_OPTS'
    line: export CATALINA_OPTS="${CATALINA_OPTS} -Dacs.home=${ACS_HOME} -Dats-tengine-aio.host={{ ats_tengine_aio_host }} -Dats-shared-fs.host={{ sfs_host }}"

- name: Add additional env vars to tomcat.sh
  become: true
  become_user: "{{ username }}"
  lineinfile:
    path: "/opt/me2ess/alfresco/tomcat.sh"
    insertafter: 'CATALINA_OPTS'
    line: export {{ item.key }}="{{ item.value }}"
  loop: "{{ acs_environment | dict2items }}"

- name: 
  include_tasks: install-OfflineDepLibs.yml  


############# Check async download tasks ######################

- name: Verifying if the distribution zip finished downloading
  delegate_to: localhost
  become: false
  async_status:
    jid: "{{ distribution_download_toController.ansible_job_id }}"
    #jid: "{{ distribution_download_result.ansible_job_id }}"
  until: job_result.finished
  delay: 30
  retries: 20
  register: job_result
  
- name: Check on amp download async task
  delegate_to: localhost
  become: false
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 5
  retries: 300
  loop: "{{ amp_download_result_toController.results }}"


- name: Check on postgres download async task
  delegate_to: localhost
  become: false
  #become: true
  #become_user: root
  async_status:
    jid: "{{ postgresql_download_toController.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 5
  retries: 300
  when: repo_db_url == ""

- name: Check on war download async task
  delegate_to: localhost
  become: false
  #become: true
  #become_user: root
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  delay: 5
  retries: 300
  loop: "{{ war_download_result_toController.results }}"
  
  ######### End Check async download tasks###################


############# Transfer to target
# Troubleshoot misplaced stuff
#- name: "Transfer {{ acs_zip_file }}"
#  copy:
#    src:  "{{ role_path }}/files/{{ acs_zip_file }}" 
#    dest: "{{ download_location }}/{{ acs_zip_file }}"
#    owner: "{{ username }}"
#    group: "{{ group_name }}"
#    mode: 'u=rwx,g=rwx,o=rx'
#  #register: distribution_download_toController

- name: Download AMPS
  become: true
  become_user: root
  loop: "{{ query('items', amp_downloads) }}"
  copy:
    dest: "{{ item.dest }}"
    src: "{{ role_path }}/files/{{ item.dest }}"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rw,g=r,o=r'
  #register: amp_download_result_toController

- name: Download postgresql jar
  become: true
  become_user: root
  copy:
    dest:  "{{ role_path }}/files/postgresql.jar"
    src: "{{ tomcat_config_dir }}/lib/postgresql.jar"
    mode: 'u=rw,g=r,o=r'
    owner: "{{ username }}"
    group: "{{ group_name }}"
  #register: postgresql_download_toController
  when: repo_db_url == ""
  
- name: Download war files
  become: true
  become_user: root
  loop: "{{ query('items', war_downloads) }}"
  changed_when: false
  copy:
    dest: "{{ item.dest }}"
    src: "{{ role_path }}/files/{{ item.dest }}"    
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'
  #register: war_download_result_toController

################## End Transfer to target

- name: Add the configuration templates
  become: true
  become_user: "{{ username }}"
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: "{{ item }}"
    dest: "{{ settings_folder }}/classpath/alfresco/web-extension/{{ item }}"
    mode: 'u=rwx,g=rwx,o=rx'
  loop: "{{ share_templates }}"
  changed_when: false
  
  
#debug
#- name: Wait
#  pause:
#    prompt: "Before Extract {{ acs_zip_file }} into {{ content_folder }}"

- name: Extract {{ acs_zip_file }} into {{ content_folder }}
  become: true
  become_user: "{{ username }}"
  unarchive:
    #src: "{{ download_location }}/{{ acs_zip_file }}"
    src: "{{ role_path }}/files/{{ acs_zip_file }}" 
    dest: "{{ content_folder }}"
    # content_folder = "/opt/me2ess/alfresco/content-services-{{ acs.version }}"
    remote_src: false
    #creates: "{{ content_folder }}/bin"

- name: Move alfresco-share-services.amp to {{ content_folder }}/amps_repo folder
  block:
    - name: Check if alfresco-share-services.amp file exists
      stat:
        path: "{{ content_folder }}/amps/alfresco-share-services.amp"
      register: share_amp_exists
    - name: Copy alfresco-share-services.amp
      copy:
        remote_src: true
        src: "{{ content_folder }}/amps/alfresco-share-services.amp"
        dest: "{{ content_folder }}/amps_repo/alfresco-share-services.amp"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: share_amp_exists.stat.exists
    - name: Remove amps folder
      file:
        path: "{{ content_folder }}/amps"
        state: absent



- name: Copy user provided license file
  copy:
    src: "{{ role_path }}/../../configuration_files/licenses/"
    dest: "{{ settings_folder }}/licenses/"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Move keystore folders for ACS7
  block:
    - name: Check if source keystore folder exists
      stat:
        path: "{{ content_folder }}/keystore"
      register: keystore
    - name: Copy keystore folder {{ content_data_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/keystore/metadata-keystore/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when:
        - keystore.stat.exists
        - not use_custom_keystores
    - name: Remove keystore folder
      file:
        path: "{{ content_folder }}/keystore"
        state: absent
    - name: copy custom keystore files
      copy:
        src: "{{ role_path }}/../../configuration_files/keystores/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: use_custom_keystores
  when: acs.version is version('7.0.0', 'ge')

- name: Move keystore folders for ACS6
  block:
    - name: Check if source keystore folder exists
      stat:
        path: "{{ content_folder }}/alf_data/keystore"
      register: keystore
    - name: Copy keystore folder {{ content_data_folder }}
      copy:
        remote_src: true
        src: "{{ content_folder }}/alf_data/keystore"
        dest: "{{ content_data_folder }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when:
        - keystore.stat.exists
        - not use_custom_keystores
    - name: Remove keystore folder
      file:
        path: "{{ content_folder }}/alf_data/keystore"
        state: absent
    - name: copy custom keystore file
      copy:
        src: "{{ role_path }}/../../configuration_files/keystores/"
        dest: "{{ content_data_folder }}/keystore/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'
      when: use_custom_keystores
  when: acs.version is version('7.0.0', 'lt')

#debug
#- name: Wait
#  pause:
#    prompt: "Move classes folder"


- name: Move classes folder
  block:
    - name: Check if classes files exists
      stat:
        path: "{{ settings_folder }}/classpath"
      register: classes
    - name: Copy classes
      become: true
      become_user: "{{ username }}"
      copy:
        remote_src: true
        src: "{{ content_folder }}/shared/classes/"
        dest: "{{ settings_folder }}/classpath/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      when: not classes.stat.exists
    - name: Remove classes files
      file:
        path: "{{ content_folder }}/shared/classes/"
        state: absent

#debug
#- name: Wait
#  pause:
#    prompt: "Move conf folder"

- name: Move conf folder
  block:
    - name: Check if conf files exist
      stat:
        path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
      register: conf_exists
    - name: Copy conf
      become: true
      become_user: "{{ username }}"
      copy:
        remote_src: true
        src: "{{ content_folder }}/web-server/conf/Catalina/localhost/"
        dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      when: not conf_exists.stat.exists
    - name: Remove conf files
      file:
        path: "{{ content_folder }}/web-server/conf"
        state: absent

- name: Add context home to alfresco.xml
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
    regexp: '<Context crossContext="true">'
    line: '<Context crossContext="true" docBase="{{ content_folder }}/web-server/webapps/alfresco.war">'

- name: Add context home to share.xml
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/share.xml"
    regexp: '<Context crossContext="true">'
    line: '<Context crossContext="true" docBase="{{ content_folder }}/web-server/webapps/share.war">'

- name: Check if "{{ tomcat_config_dir }}/conf/Catalina/localhost/ROOT.xml" exists
  stat:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/ROOT.xml"
  register: root_xml

- name: Create ROOT.xml
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: ROOT.xml
    dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/ROOT.xml"
    mode: 'u=rwx,g=rwx,o=rx'
  when: not root_xml.stat.exists

- name: Check if "{{ tomcat_config_dir }}/conf/Catalina/localhost/_vti_bin.xml" exists
  stat:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/_vti_bin.xml"
  register: vti_xml

- name: Create _vti_bin.xml
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: _vti_bin.xml
    dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/_vti_bin.xml"
    mode: 'u=rwx,g=rwx,o=rx'
  when: not vti_xml.stat.exists

- name: Check if "{{ tomcat_config_dir }}/conf/Catalina/localhost/api-explorer.xml" exists
  stat:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/api-explorer.xml"
  register: api_explorer_xml

- name: Create api-explorer.xml
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: api-explorer.xml
    dest: "{{ tomcat_config_dir }}/conf/Catalina/localhost/api-explorer.xml"
    mode: 'u=rwx,g=rwx,o=rx'
  when: not api_explorer_xml.stat.exists

- name: Create alfresco-global.properties
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: alfresco-global.properties
    dest: "{{ settings_folder }}/classpath/alfresco-global.properties"
    mode: 'u=rwx,g=rwx,o=rx'


- name: Create apply_amps.sh
  template:
    owner: "{{ username }}"
    group: "{{ group_name }}"
    src: apply_amps.sh
    dest: "{{ content_folder }}/apply_amps.sh"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Install amps on alfresco and share war files
  shell: '{{ content_folder }}/apply_amps.sh -nobackup -force'
  register: mmt_install
  changed_when: mmt_install.rc != 0



- name: Setup common loader
  become: true
  become_user: "{{ username }}"
  failed_when: false
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/catalina.properties"
    regexp: '^common.loader='
    line: "common.loader=\"/etc/opt/me2ess/alfresco/content-services/classpath\",\"${catalina.base}/lib\",\"${catalina.base}/lib/*.jar\",\"{{ content_folder }}/web-server/lib\",\"{{ content_folder }}/web-server/lib/*.jar\",\"${catalina.home}/lib\",\"${catalina.home}/lib/*.jar\""

#- name: Add PostResources to alfresco.xml
#  become: true
#  become_user: root
#  #lineinfile:
#  replace:
#    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
#    #regexp: '<PostResources base='
#    regexp: '/modules/platform'
#    #line: '<PostResources base="/opt/me2ess/alfresco/modules/acs-platform"'
#    replace: '/modules/acs-platform'

- name: Add PostResources to alfresco.xml
  become: true
  become_user: root
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
    regexp: '<PostResources base='
    line: '<PostResources base="/opt/me2ess/alfresco/modules/acs-platform"'



    
- name: Implement fix for insufficient cache to alfresco.xml
# described in tech support article 000013684  
# and mirrored in https://hub.alfresco.com/t5/alfresco-content-services-forum/planning-upgrade-alfresco-community-5-0-b-to-6-2/m-p/302678#M21740
  become: true
  become_user: root
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/alfresco.xml"
    line: '  <Resources cachingAllowed="true" cacheMaxSize="100000"/>'
    insertbefore: "</Context>"    
    state: present

#- name: Add PostResources to share.xml
#  become: true
#  become_user: root
#  #lineinfile:
#  replace:
#    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/share.xml"
#    #regexp: '<PostResources base='
#    regexp: '/modules/share'
#    replace: 'modules/acs-share'
#    #line: '<PostResources base="/opt/me2ess/alfresco/modules/acs-share"'
- name: Add PostResources to share.xml
  become: true
  become_user: root
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/share.xml"
    regexp: '<PostResources base='
    line: '<PostResources base="/opt/me2ess/alfresco/modules/acs-share"'

- name: Implement fix for insufficient cache to share.xml
# described in tech support article 000013684  
# and mirrored in https://hub.alfresco.com/t5/alfresco-content-services-forum/planning-upgrade-alfresco-community-5-0-b-to-6-2/m-p/302678#M21740
  become: true
  become_user: root
  lineinfile:
    path: "{{ tomcat_config_dir }}/conf/Catalina/localhost/share.xml"
    line: '  <Resources cachingAllowed="true" cacheMaxSize="100000"/>'
    insertbefore: "</Context>"    
    state: present
    
# it is observed that alfresco.xml provided in the ACS zip has DOS style carriage returns in them. This task cleans up the XML for use in Linux.    
- name: 
  include_tasks: dos2unix-CleanXMLDescriptors.yml

- name: Insert or Update custom properties added through configuration_files/alfresco-global.properties
  blockinfile:
    path: "{{ settings_folder }}/classpath/alfresco-global.properties"
    marker: "{mark} - ANSIBLE MANAGED BLOCK"
    marker_begin: "### Begin - Custom user properties"
    marker_end: "### End - Custom user properties"
    insertafter: EOF
    block: "{{ lookup('file', role_path + '/../../configuration_files/alfresco-global.properties') }}"
  notify: alfresco-content-restart
  
- name: Explode WAR because Tomcat doesn't seem to do it properly
  block:
    - name: "Check if {{ tomcat_working }}/webapps/alfresco exists"
      stat:
        path: "{{ tomcat_working }}/webapps/alfresco"
      register: alfrescoPath
    - name: "Create {{ tomcat_working }}/webapps/alfresco"
      when: not alfrescoPath.stat.exists
      file:
        path: "{{ tomcat_working }}/webapps/alfresco"
        state: directory
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rx,o=rx'
    - name: Explode Alfresco WAR
      when: not alfrescoPath.stat.exists
      unarchive: 
        dest: "{{ tomcat_working }}/webapps/alfresco"
        src: "{{ content_folder }}/web-server/webapps/alfresco.war"
        remote_src: yes
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rx,o=rx'
  
- name: Copy ACS Extensions to {{ tomcat_working }}/web-server/webapps/alfresco/WEB-INF/lib/ folder
  block:
    - name: Copy Bulk Object Mapper Extension (from {{ role_path }}/files/{{ acs_bulk_object_mapper_file }} to  {{ tomcat_working }}/web-server/webapps/alfresco/WEB-INF/lib/)
      copy:
        src: "{{ role_path }}/files/{{ acs_bulk_object_mapper_file }}"
        dest: "{{ tomcat_working }}/webapps/alfresco/WEB-INF/lib/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rx,o=rx'
    - name: Copy Content Administrator Extension
      copy:
        src: "{{ role_path }}/files/{{acs_content_administrator_file}}"
        dest: "{{ tomcat_working }}/webapps/alfresco/WEB-INF/lib/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rx,o=rx'
    - name: Copy ACS Core Extension
      copy:
        src: "{{ role_path }}/files/{{acs_core_file}}"
        dest: "{{ tomcat_working }}/webapps/alfresco/WEB-INF/lib/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rx,o=rx'

#- name: Check on Exploded WAR
#  pause:
#    prompt: "Check the exploded WAR in {{ tomcat_working }}/webapps/alfresco"
    

- name: Notify alfresco content service
  wait_for:
          #host: "{{ db_host }}"
    host: "{{ ansible_eth0.ipv4.address }}"
    port: "{{ repo_db_port }}"
  notify: alfresco-content-start
  when: repo_db_url == ""

- name: Alfresco content service for external db
  service:
    name: alfresco-content 
    state: restarted
  when: repo_db_url != ""
